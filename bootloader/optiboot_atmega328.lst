
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007ff8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000026c  2**0
                  CONTENTS, READONLY
  3 .stab         00000c84  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed1  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	14 be       	out	0x34, r1	; 52
    7e0c:	81 ff       	sbrs	r24, 1
    7e0e:	eb d0       	rcall	.+470    	; 0x7fe6 <appStart>
    7e10:	85 e0       	ldi	r24, 0x05	; 5
    7e12:	80 93 81 00 	sts	0x0081, r24
    7e16:	82 e0       	ldi	r24, 0x02	; 2
    7e18:	80 93 c0 00 	sts	0x00C0, r24
    7e1c:	88 e1       	ldi	r24, 0x18	; 24
    7e1e:	80 93 c1 00 	sts	0x00C1, r24
    7e22:	96 e0       	ldi	r25, 0x06	; 6
    7e24:	90 93 c2 00 	sts	0x00C2, r25
    7e28:	90 e1       	ldi	r25, 0x10	; 16
    7e2a:	90 93 c4 00 	sts	0x00C4, r25
    7e2e:	80 93 60 00 	sts	0x0060, r24
    7e32:	8e e0       	ldi	r24, 0x0E	; 14
    7e34:	80 93 60 00 	sts	0x0060, r24
    7e38:	25 9a       	sbi	0x04, 5	; 4
    7e3a:	26 e0       	ldi	r18, 0x06	; 6
    7e3c:	88 e1       	ldi	r24, 0x18	; 24
    7e3e:	9e ef       	ldi	r25, 0xFE	; 254
    7e40:	31 e0       	ldi	r19, 0x01	; 1
    7e42:	90 93 85 00 	sts	0x0085, r25
    7e46:	80 93 84 00 	sts	0x0084, r24
    7e4a:	36 bb       	out	0x16, r19	; 22
    7e4c:	b0 9b       	sbis	0x16, 0	; 22
    7e4e:	fe cf       	rjmp	.-4      	; 0x7e4c <main+0x4c>
    7e50:	1d 9a       	sbi	0x03, 5	; 3
    7e52:	a8 95       	wdr
    7e54:	21 50       	subi	r18, 0x01	; 1
    7e56:	a9 f7       	brne	.-22     	; 0x7e42 <main+0x42>
    7e58:	61 2c       	mov	r6, r1
    7e5a:	71 2c       	mov	r7, r1
    7e5c:	98 e1       	ldi	r25, 0x18	; 24
    7e5e:	e9 2e       	mov	r14, r25
    7e60:	28 e0       	ldi	r18, 0x08	; 8
    7e62:	d2 2e       	mov	r13, r18
    7e64:	33 e0       	ldi	r19, 0x03	; 3
    7e66:	f3 2e       	mov	r15, r19
    7e68:	cc 24       	eor	r12, r12
    7e6a:	c3 94       	inc	r12
    7e6c:	45 e0       	ldi	r20, 0x05	; 5
    7e6e:	b4 2e       	mov	r11, r20
    7e70:	51 e1       	ldi	r21, 0x11	; 17
    7e72:	a5 2e       	mov	r10, r21
    7e74:	93 d0       	rcall	.+294    	; 0x7f9c <getch>
    7e76:	81 34       	cpi	r24, 0x41	; 65
    7e78:	69 f4       	brne	.+26     	; 0x7e94 <main+0x94>
    7e7a:	90 d0       	rcall	.+288    	; 0x7f9c <getch>
    7e7c:	89 83       	std	Y+1, r24	; 0x01
    7e7e:	9a d0       	rcall	.+308    	; 0x7fb4 <verifySpace>
    7e80:	89 81       	ldd	r24, Y+1	; 0x01
    7e82:	82 38       	cpi	r24, 0x82	; 130
    7e84:	f1 f0       	breq	.+60     	; 0x7ec2 <main+0xc2>
    7e86:	81 38       	cpi	r24, 0x81	; 129
    7e88:	11 f4       	brne	.+4      	; 0x7e8e <main+0x8e>
    7e8a:	85 e0       	ldi	r24, 0x05	; 5
    7e8c:	01 c0       	rjmp	.+2      	; 0x7e90 <main+0x90>
    7e8e:	83 e0       	ldi	r24, 0x03	; 3
    7e90:	7e d0       	rcall	.+252    	; 0x7f8e <putch>
    7e92:	7a c0       	rjmp	.+244    	; 0x7f88 <main+0x188>
    7e94:	82 34       	cpi	r24, 0x42	; 66
    7e96:	11 f4       	brne	.+4      	; 0x7e9c <main+0x9c>
    7e98:	84 e1       	ldi	r24, 0x14	; 20
    7e9a:	03 c0       	rjmp	.+6      	; 0x7ea2 <main+0xa2>
    7e9c:	85 34       	cpi	r24, 0x45	; 69
    7e9e:	19 f4       	brne	.+6      	; 0x7ea6 <main+0xa6>
    7ea0:	85 e0       	ldi	r24, 0x05	; 5
    7ea2:	94 d0       	rcall	.+296    	; 0x7fcc <getNch>
    7ea4:	71 c0       	rjmp	.+226    	; 0x7f88 <main+0x188>
    7ea6:	85 35       	cpi	r24, 0x55	; 85
    7ea8:	41 f4       	brne	.+16     	; 0x7eba <main+0xba>
    7eaa:	78 d0       	rcall	.+240    	; 0x7f9c <getch>
    7eac:	68 2e       	mov	r6, r24
    7eae:	76 d0       	rcall	.+236    	; 0x7f9c <getch>
    7eb0:	71 2c       	mov	r7, r1
    7eb2:	78 2a       	or	r7, r24
    7eb4:	66 0c       	add	r6, r6
    7eb6:	77 1c       	adc	r7, r7
    7eb8:	66 c0       	rjmp	.+204    	; 0x7f86 <main+0x186>
    7eba:	86 35       	cpi	r24, 0x56	; 86
    7ebc:	21 f4       	brne	.+8      	; 0x7ec6 <main+0xc6>
    7ebe:	84 e0       	ldi	r24, 0x04	; 4
    7ec0:	85 d0       	rcall	.+266    	; 0x7fcc <getNch>
    7ec2:	80 e0       	ldi	r24, 0x00	; 0
    7ec4:	e5 cf       	rjmp	.-54     	; 0x7e90 <main+0x90>
    7ec6:	84 36       	cpi	r24, 0x64	; 100
    7ec8:	09 f0       	breq	.+2      	; 0x7ecc <main+0xcc>
    7eca:	40 c0       	rjmp	.+128    	; 0x7f4c <main+0x14c>
    7ecc:	67 d0       	rcall	.+206    	; 0x7f9c <getch>
    7ece:	66 d0       	rcall	.+204    	; 0x7f9c <getch>
    7ed0:	98 2e       	mov	r9, r24
    7ed2:	64 d0       	rcall	.+200    	; 0x7f9c <getch>
    7ed4:	61 14       	cp	r6, r1
    7ed6:	80 e7       	ldi	r24, 0x70	; 112
    7ed8:	78 06       	cpc	r7, r24
    7eda:	18 f0       	brcs	.+6      	; 0x7ee2 <main+0xe2>
    7edc:	00 e0       	ldi	r16, 0x00	; 0
    7ede:	11 e0       	ldi	r17, 0x01	; 1
    7ee0:	04 c0       	rjmp	.+8      	; 0x7eea <main+0xea>
    7ee2:	f3 01       	movw	r30, r6
    7ee4:	f7 be       	out	0x37, r15	; 55
    7ee6:	e8 95       	spm
    7ee8:	f9 cf       	rjmp	.-14     	; 0x7edc <main+0xdc>
    7eea:	58 d0       	rcall	.+176    	; 0x7f9c <getch>
    7eec:	f8 01       	movw	r30, r16
    7eee:	81 93       	st	Z+, r24
    7ef0:	8f 01       	movw	r16, r30
    7ef2:	9e 12       	cpse	r9, r30
    7ef4:	fa cf       	rjmp	.-12     	; 0x7eea <main+0xea>
    7ef6:	61 14       	cp	r6, r1
    7ef8:	f0 e7       	ldi	r31, 0x70	; 112
    7efa:	7f 06       	cpc	r7, r31
    7efc:	18 f0       	brcs	.+6      	; 0x7f04 <main+0x104>
    7efe:	f3 01       	movw	r30, r6
    7f00:	f7 be       	out	0x37, r15	; 55
    7f02:	e8 95       	spm
    7f04:	57 d0       	rcall	.+174    	; 0x7fb4 <verifySpace>
    7f06:	07 b6       	in	r0, 0x37	; 55
    7f08:	00 fc       	sbrc	r0, 0
    7f0a:	fd cf       	rjmp	.-6      	; 0x7f06 <main+0x106>
    7f0c:	a3 01       	movw	r20, r6
    7f0e:	a0 e0       	ldi	r26, 0x00	; 0
    7f10:	b1 e0       	ldi	r27, 0x01	; 1
    7f12:	8c 91       	ld	r24, X
    7f14:	12 96       	adiw	r26, 0x02	; 2
    7f16:	9d 01       	movw	r18, r26
    7f18:	21 50       	subi	r18, 0x01	; 1
    7f1a:	31 09       	sbc	r19, r1
    7f1c:	f9 01       	movw	r30, r18
    7f1e:	20 81       	ld	r18, Z
    7f20:	90 e0       	ldi	r25, 0x00	; 0
    7f22:	92 2b       	or	r25, r18
    7f24:	fa 01       	movw	r30, r20
    7f26:	0c 01       	movw	r0, r24
    7f28:	c7 be       	out	0x37, r12	; 55
    7f2a:	e8 95       	spm
    7f2c:	11 24       	eor	r1, r1
    7f2e:	4e 5f       	subi	r20, 0xFE	; 254
    7f30:	5f 4f       	sbci	r21, 0xFF	; 255
    7f32:	a0 38       	cpi	r26, 0x80	; 128
    7f34:	f1 e0       	ldi	r31, 0x01	; 1
    7f36:	bf 07       	cpc	r27, r31
    7f38:	61 f7       	brne	.-40     	; 0x7f12 <main+0x112>
    7f3a:	f3 01       	movw	r30, r6
    7f3c:	b7 be       	out	0x37, r11	; 55
    7f3e:	e8 95       	spm
    7f40:	07 b6       	in	r0, 0x37	; 55
    7f42:	00 fc       	sbrc	r0, 0
    7f44:	fd cf       	rjmp	.-6      	; 0x7f40 <main+0x140>
    7f46:	a7 be       	out	0x37, r10	; 55
    7f48:	e8 95       	spm
    7f4a:	1e c0       	rjmp	.+60     	; 0x7f88 <main+0x188>
    7f4c:	84 37       	cpi	r24, 0x74	; 116
    7f4e:	61 f4       	brne	.+24     	; 0x7f68 <main+0x168>
    7f50:	25 d0       	rcall	.+74     	; 0x7f9c <getch>
    7f52:	24 d0       	rcall	.+72     	; 0x7f9c <getch>
    7f54:	18 2f       	mov	r17, r24
    7f56:	22 d0       	rcall	.+68     	; 0x7f9c <getch>
    7f58:	2d d0       	rcall	.+90     	; 0x7fb4 <verifySpace>
    7f5a:	f3 01       	movw	r30, r6
    7f5c:	85 91       	lpm	r24, Z+
    7f5e:	3f 01       	movw	r6, r30
    7f60:	16 d0       	rcall	.+44     	; 0x7f8e <putch>
    7f62:	11 50       	subi	r17, 0x01	; 1
    7f64:	d1 f7       	brne	.-12     	; 0x7f5a <main+0x15a>
    7f66:	10 c0       	rjmp	.+32     	; 0x7f88 <main+0x188>
    7f68:	85 37       	cpi	r24, 0x75	; 117
    7f6a:	39 f4       	brne	.+14     	; 0x7f7a <main+0x17a>
    7f6c:	23 d0       	rcall	.+70     	; 0x7fb4 <verifySpace>
    7f6e:	8e e1       	ldi	r24, 0x1E	; 30
    7f70:	0e d0       	rcall	.+28     	; 0x7f8e <putch>
    7f72:	85 e9       	ldi	r24, 0x95	; 149
    7f74:	0c d0       	rcall	.+24     	; 0x7f8e <putch>
    7f76:	8f e0       	ldi	r24, 0x0F	; 15
    7f78:	8b cf       	rjmp	.-234    	; 0x7e90 <main+0x90>
    7f7a:	81 35       	cpi	r24, 0x51	; 81
    7f7c:	21 f4       	brne	.+8      	; 0x7f86 <main+0x186>
    7f7e:	e0 92 60 00 	sts	0x0060, r14
    7f82:	d0 92 60 00 	sts	0x0060, r13
    7f86:	16 d0       	rcall	.+44     	; 0x7fb4 <verifySpace>
    7f88:	80 e1       	ldi	r24, 0x10	; 16
    7f8a:	01 d0       	rcall	.+2      	; 0x7f8e <putch>
    7f8c:	73 cf       	rjmp	.-282    	; 0x7e74 <main+0x74>

00007f8e <putch>:
    putch(STK_OK);
  }
}

void putch(char ch) {
  while (!(UART_SRA & _BV(UDRE0)));
    7f8e:	90 91 c0 00 	lds	r25, 0x00C0
    7f92:	95 ff       	sbrs	r25, 5
    7f94:	fc cf       	rjmp	.-8      	; 0x7f8e <putch>
  UART_UDR = ch;
    7f96:	80 93 c6 00 	sts	0x00C6, r24
    7f9a:	08 95       	ret

00007f9c <getch>:
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
#endif
#endif
  while(!(UART_SRA & _BV(RXC0)))
    7f9c:	80 91 c0 00 	lds	r24, 0x00C0
    7fa0:	87 ff       	sbrs	r24, 7
    7fa2:	fc cf       	rjmp	.-8      	; 0x7f9c <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7fa4:	80 91 c0 00 	lds	r24, 0x00C0
    7fa8:	84 fd       	sbrc	r24, 4
    7faa:	01 c0       	rjmp	.+2      	; 0x7fae <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fac:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7fae:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fb2:	08 95       	ret

00007fb4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fb4:	f3 df       	rcall	.-26     	; 0x7f9c <getch>
    7fb6:	80 32       	cpi	r24, 0x20	; 32
    7fb8:	39 f0       	breq	.+14     	; 0x7fc8 <verifySpace+0x14>
    7fba:	88 e1       	ldi	r24, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fbc:	80 93 60 00 	sts	0x0060, r24
    7fc0:	88 e0       	ldi	r24, 0x08	; 8
  WDTCSR = x;
    7fc2:	80 93 60 00 	sts	0x0060, r24
    7fc6:	ff cf       	rjmp	.-2      	; 0x7fc6 <verifySpace+0x12>
    7fc8:	84 e1       	ldi	r24, 0x14	; 20
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fca:	e1 cf       	rjmp	.-62     	; 0x7f8e <putch>

00007fcc <getNch>:
#endif

  return ch;
}

void getNch(uint8_t count) {
    7fcc:	cf 93       	push	r28
    7fce:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fd0:	e5 df       	rcall	.-54     	; 0x7f9c <getch>
    7fd2:	c1 50       	subi	r28, 0x01	; 1
    7fd4:	e9 f7       	brne	.-6      	; 0x7fd0 <getNch+0x4>
    7fd6:	cf 91       	pop	r28
  verifySpace();
}
    7fd8:	ed cf       	rjmp	.-38     	; 0x7fb4 <verifySpace>

00007fda <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fda:	e0 e6       	ldi	r30, 0x60	; 96
    7fdc:	f0 e0       	ldi	r31, 0x00	; 0
    7fde:	98 e1       	ldi	r25, 0x18	; 24
    7fe0:	90 83       	st	Z, r25
  WDTCSR = x;
    7fe2:	80 83       	st	Z, r24
    7fe4:	08 95       	ret

00007fe6 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fe6:	28 2e       	mov	r2, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fe8:	e0 e6       	ldi	r30, 0x60	; 96
    7fea:	f0 e0       	ldi	r31, 0x00	; 0
    7fec:	88 e1       	ldi	r24, 0x18	; 24
    7fee:	80 83       	st	Z, r24
  WDTCSR = x;
    7ff0:	10 82       	st	Z, r1
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));

  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    7ff2:	ee 27       	eor	r30, r30
    7ff4:	ff 27       	eor	r31, r31
    7ff6:	09 94       	ijmp
